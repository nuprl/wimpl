// Line comments are supported.

// Variables begin with either s, g, l, or p; nothing else.
s0 = i32.const 1
g0 = f32.const 1.1
l0 = i64.const 42
p0 = f64.const .1
// invalid:
// v1 = i32.const 7 
// x = i32.const 7

// Instructions take runtime arguments in parentheses.
s1 = i32.ne(s0)
s2 = i32.add (s0, s1)

// Calls always need the argument parentheses.
call f1 ()

// Instruction "immediates", i.e., arguments that are statically encoded
// into the instruction come before the argument.
s3 = i32.load offset=3 (s0)
call_indirect [ ] ->[] (s1) ()

// Blocks are explicitly labeled.
@label0: block {}
// Such that branches can target them.
@label1: block { br @label1 }
// Blocks can also have LHS.
s4 = @label2: loop {
    s5 = i32.const 3
    br @label2 (s5)
}

// Another example...
g0 = @label0: block {
    s6 = i32.const 2
    br @label0 (s6)
    s7 = i32.const 3
    s7
}
l1 = g0
